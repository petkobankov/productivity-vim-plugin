*productivity-vim-plugin.txt*	TODO

==============================================================================
CONTENTS                                        *productivity-vim-plugin*   *productivity-vim-plugin-contents*

    Installation................................: |productivity-vim-plugin-installation|
    Usage.......................................: |productivity-vim-plugin-usage|
    Settings....................................: |productivity-vim-plugin-settings|
    Internals...................................: |productivity-vim-plugin-internals|
    Issues......................................: |productivity-vim-plugin-issues|


==============================================================================
INSTALLATION                                            *productivity-vim-plugin-installation*

The easiest way to install the plugin is with a plugin manager:

- vim-plug: https://github.com/junegunn/vim-plug
- Vundle:   https://github.com/VundleVim/Vundle.vim

If you use one, just follow the instructions in its documentation.

You can install the plugin yourself using Vim's |packages| functionality by
cloning the project (or adding it as a submodule) under
`~/.vim/pack/<any-name>/start/`. For example:
>
    mkdir -p ~/.vim/pack/andrewradev/start
    cd ~/.vim/pack/andrewradev/start
    git clone https://github.com/andrewradev/productivity-vim-plugin.vim.git

    # to generate documentation tags:
    vim -u NONE -c "helptags productivity-vim-plugin.vim/doc" -c q
<
This should automatically load the plugin for you when Vim starts.
Alternatively, you can add it to `~/.vim/pack/<any-name>/opt/` instead and
load it in your .vimrc manually with:
>
    packadd productivity-vim-plugin
<
If you'd rather not use git, you can download the files from the "releases"
tab and unzip them in the relevant directory:
https://github.com/AndrewRadev/productivity-vim-plugin.vim/releases.


==============================================================================
USAGE                                                          *productivity-vim-plugin-usage*

This plugin is a to-do list with a maximum of 3 tasks for the day, each task has assigned pomodoros number and one of the tasks is a higher priority than the other two. You can add a task with expected pomodoro count with ":AddTask task-name pomodoro-count". You can see the current tasks with ":SeeTasks". With "SetAsPriority" it sets the tasks you are currently on from SeeTasks as the task with the higher priority. With ":SelectTask" we set a task from SeeTasks as the current one for which after a pomodoro is over, it's count will lower by 1. With ":StartPomodoro" we start a pomodoro timer and after it's over the count of the pomodoros of the current selected task is lowered by one. No more than 3 tasks can be added with AddTask. On the status bar there is only a signal that either a pomodoro timer is running, if it's break time or if no timer is running. Intentionally there is no exact countdown shown and no audio alerts on completion to not interrupt the flow. Because of that the user will use ":StartBreak" to start their break after a pomodoro has finished.
Also you can toggle SeeTasks with 'gb'. After that the task you are on, once you press enter it is selected as if writing 'SelectTasks'.
With 'CompleteTask' the current task is marked as completed and deleted. This way we can focus on other tasks. 


==============================================================================
SETTINGS                                                    *productivity-vim-plugin-settings*

g:pomodoro_time - how long one pomodoro is in minutes. By default set to 25.
g:break_time - how long each break is in minutes. By default 5 minutes.


==============================================================================
INTERNALS                                                  *productivity-vim-plugin-internals*

Currently each task is stored in a dictionary g:tasks. The tasks on change are then stored in ~/.vimtasks and loaded when needed. When we call SeeTasks, the tasks are shown in a temp buffer, so the user can easily select for which task the called function showld work on. Once a function is called, it checks the line which the user is on and get's the name of the task. 
let g:tasks = Here all the tasks are stored, a dictionary. 
let g:priority_task = This has the name of the task we have picked as priority.
let g:current_task = This has the name of the task we have picked as the current one. Most functions needing a task use this one.
let g:can_have_break = If no pomodoro has been run, it stays false. After a pomodoro is over it goes to true. After a break it goes to false.
let g:timer_running = If a break timer or pomodoro timer is running this is true. It's purpose is to not have more than one timer running.
let g:pomodoro_timer = Minutes of a pomodoro timer. Default is 25.
let g:break_timer = Minutes of a break timer. Default is 5.
let g:current_status = The text for the status line. By default is 'no_timer'. If a pomodoro timer is running it is 'pomodoro'. If a break timer is running it is 'break'.

==============================================================================
ISSUES                                                        *productivity-vim-plugin-issues*

Any issues and suggestions are very welcome on the github bugtracker:
https://github.com/AndrewRadev/productivity-vim-plugin.vim/issues


vim:tw=78:sw=4:ft=help:norl:
